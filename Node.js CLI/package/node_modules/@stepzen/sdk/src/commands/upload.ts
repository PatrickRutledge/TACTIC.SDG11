// Copyright IBM Corp. 2020, 2025

import debug from 'debug'
import path from 'node:path'
import fetch from '@stepzen/fetch'

import {ADMIN_UPLOAD_URL} from '../shared/constants.js'
import {generateYamlPayload, generateZipPayload} from '../shared/payloads.js'
import {getRequestHeaders} from '../shared/request.js'
import {
  SDKConfiguration,
  StepZenAccount,
  StepZenUpload,
  ZenCtlResponse,
} from '../shared/types.js'
import {transpileConfigurationset} from '../shared/transpiling.js'
import {validateConfigurationset, validateSchema} from '../shared/validation.js'
import {rmtemp} from '../shared/rmtemp.js'

export default async (
  details: StepZenUpload,
  account: StepZenAccount,
  sdkConfig: SDKConfiguration,
): Promise<ZenCtlResponse> => {
  const headers = getRequestHeaders(account, sdkConfig)
  let payload

  switch (details.type) {
    case 'configurationset':
      await validateConfigurationset(details.file)
      const transpiled = await transpileConfigurationset(details.file!)
      try {
        debug('stepzen:sdk')(`effective config written to ${transpiled}`)
        payload = await generateYamlPayload(transpiled)
      } finally {
        rmtemp(path.dirname(transpiled))
      }
      break

    case 'schema':
      await validateSchema(details.directory)
      payload = await generateZipPayload(
        details.directory,
        {
          destination: details.destination,
          stitcherName: 'index.graphql',
        },
        [/.*\.graphql$/i],
      )
      break
  }

  debug('stepzen:headers')(headers)
  debug('stepzen:payload')(payload)

  const response = await fetch(
    `${account.server}${ADMIN_UPLOAD_URL}/${details.type}/${details.destination}`,
    {
      body: payload,
      headers: headers as any,
      method: 'POST',
    },
  )

  debug('stepzen:response')(response)

  if (response.status >= 400 && response.status < 500) {
    return {
      message:
        'Could not complete the request. Please check your authentication details are correct.',
      success: false,
    }
  }

  if (response.status >= 500) {
    return {
      errors: ['Internal Server Error'],
      message: response.statusText,
      success: false,
    }
  }

  const text = await response.text()
  let json

  try {
    json = JSON.parse(text)
  } catch {
    return {
      errors: [`An unexpected error occurred.\n\n${text}`],
      message: `An unexpected error occurred.\n\n${text}`,
      success: false,
    }
  }

  return json
}
