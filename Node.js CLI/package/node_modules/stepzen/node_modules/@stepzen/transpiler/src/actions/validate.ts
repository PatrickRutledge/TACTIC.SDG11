// Copyright IBM Corp. 2020, 2025

import {buildASTSchema, DocumentNode, parse, print} from 'graphql'
import fsx from 'fs-extra'
import os from 'node:os'
import path from 'node:path'

import ensureQueryAndMutationTypes from '../utils/ensure-query-and-mutation-types.js'
import {EXPERIMENTAL_EXTENSIONS} from '../utils/constants.js'
import validators from '../validators/index.js'

export default (
  source: string,
  options: {
    extensions: string
  } = {
    extensions: '',
  },
) => {
  // Ensure source and output directories exist
  if (!fsx.existsSync(source)) {
    throw new Error(`Cannot find source directory ${source}`)
  }

  // Ensure index.graphql exists
  if (!fsx.existsSync(`${source}/index.graphql`)) {
    throw new Error(`Cannot find index.graphql in ${source}`)
  }

  // Get the index.graphql file
  const file = path.join(source, 'index.graphql')
  const index = fsx.readFileSync(file, 'utf8')

  // Parse
  let ast: DocumentNode = parse(
    `${EXPERIMENTAL_EXTENSIONS}${os.EOL}${options.extensions}${os.EOL}${index}`,
    {
      noLocation: true,
    },
  )

  // We make an exception for 'no type Query' or 'no type Mutation'
  ast = ensureQueryAndMutationTypes(ast)

  // Build and print, to validate
  buildASTSchema(ast)
  print(ast)

  // Custom validators
  for (const validator of validators) {
    validator(ast, source)
  }

  // Return true
  return true
}
