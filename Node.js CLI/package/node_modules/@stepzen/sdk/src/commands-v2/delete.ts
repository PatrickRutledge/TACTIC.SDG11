// Copyright IBM Corp. 2020, 2025

import debug from 'debug'
import {
  SDKConfigurationV2,
  StepZenDeleteV2,
  ZenCtlResponseV2,
} from '../shared/types.js'
import {fetchZenCtlGraphQLQuery} from '../shared/graphql-client.js'

export default async ({
  account,
  adminKey,
  deploymentType,
  folder,
  name,
  sdkConfig,
}: {
  account: string
  adminKey: string
  deploymentType: string
  folder: string
  name: string
  sdkConfig: SDKConfigurationV2
}): Promise<ZenCtlResponseV2<StepZenDeleteV2[]>> => {
  const {data, errors} = await fetchZenCtlGraphQLQuery<{
    removeEndpoint: Array<{
      account_name: string
      folder_name: string
      endpoint_name: string
      updated_at: string
    }>
  }>({
    account,
    adminKey,
    deploymentType,
    query: `mutation ($a: String!, $dt: String!, $f: String!, $e: String!, $ak: String!) {
        removeEndpoint(
          account: $a
          deploymentType: $dt
          folderName: $f
          endpointName: $e
          adminkey: $ak
        ) {
          account_name
          folder_name
          endpoint_name
          updated_at
        }
      }`,
    variables: {
      a: account,
      dt: deploymentType,
      f: folder,
      e: name,
      ak: adminKey,
    },
    sdkConfig,
  })

  if (errors) {
    debug('stepzen:delete')('failed to execute stepzen.delete: ' + errors)
    // strip graphql-specific error details, leave only the message
    const message = errors
      .map(({message}) => {
        if (
          message.startsWith(
            'ERROR: invalid input value for enum zenctl.deployment_type',
          )
        ) {
          return (
            `Invalid deployment type: ${deploymentType}.` +
            ` Please check the 'deploymentType' parameter.`
          )
        }

        return message
      })
      .join('\n')

    return {
      data: undefined,
      error: {
        message,
      },
    }
  }
  return {
    data: data.removeEndpoint,
    error: undefined,
  }
}
