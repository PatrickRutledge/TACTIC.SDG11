// Copyright IBM Corp. 2020, 2025

import {
  Configuration,
  SchemaFiles,
  SDKConfigurationV2,
  StepZenEndpointV2,
  ZenCtlResponseV2,
} from '../shared/types.js'
import {fetchZenCtlGraphQLQuery} from '../shared/graphql-client.js'

export default async ({
  account,
  deploymentType,
  folderName,
  endpointName,
  public: _public,
  endpointType,
  schemaFiles,
  configuration,
  adminKey,
  sdkConfig,
}: {
  account: string
  deploymentType: string
  folderName: string
  endpointName: string
  public: boolean
  endpointType: string
  schemaFiles: Readonly<SchemaFiles>
  configuration: Readonly<Configuration> | null
  adminKey: string
  sdkConfig: SDKConfigurationV2
}): Promise<ZenCtlResponseV2<StepZenEndpointV2>> => {
  const {data, errors} = await fetchZenCtlGraphQLQuery<{
    endpoints: Array<{
      account: string
      deploymentType: string
      folderName: string
      endpointName: string
      public: boolean
      endpointType: string
      createdAt: string
      updatedAt: string
    }>
  }>({
    account,
    adminKey,
    deploymentType,
    query: /* GraphQL */ `
      mutation (
        $account: String!
        $deploymentType: String!
        $folderName: String!
        $endpointName: String!
        $public: Boolean!
        $endpointType: String!
        $schemaFiles: SchemaFilesInput!
        $configuration: Configuration
        $adminKey: String!
      ) {
        endpoints: addEndpoint(
          account: $account
          deploymentType: $deploymentType
          folderName: $folderName
          endpointName: $endpointName
          public: $public
          endpointType: $endpointType
          schemaFiles: $schemaFiles
          configuration: $configuration
          adminkey: $adminKey
        ) {
          account: account_name
          deploymentType: deployment_type
          folderName: folder_name
          endpointName: endpoint_name
          public: endpoint_public
          endpointType: endpoint_type
          createdAt: created_at
          updatedAt: updated_at
        }
      }
    `,
    variables: {
      account,
      deploymentType,
      folderName,
      endpointName,
      public: _public,
      endpointType,
      schemaFiles,
      configuration,
      adminKey,
    },
    sdkConfig,
  })

  if (errors) {
    // strip graphql-specific error details, leave only the message
    const message = errors
      .map(({message}) => {
        if (
          message.startsWith(
            'ERROR: invalid input value for enum zenctl.deployment_type',
          )
        ) {
          return (
            `Invalid deployment type: ${deploymentType}.` +
            ` Please check the 'deploymentType' parameter.`
          )
        }

        if (
          message.startsWith(
            'ERROR: invalid input value for enum zenctl.endpoint_type',
          )
        ) {
          return (
            `Invalid endpoint type: ${endpointType}.` +
            ` Please check the 'endpointType' parameter.`
          )
        }

        return message
      })
      .join('\n')

    return {
      data: undefined,
      error: {
        message,
      },
    }
  }

  if (!data.endpoints.length) {
    return {
      data: undefined,
      error: {
        message: 'Invalid credentials',
      },
    }
  }

  const endpoint: StepZenEndpointV2 = {
    account: data.endpoints[0].account,
    deploymentType: data.endpoints[0].deploymentType,
    folderName: data.endpoints[0].folderName,
    endpointName: data.endpoints[0].endpointName,
    public: data.endpoints[0].public,
    endpointType: data.endpoints[0].endpointType,
    createdAt: new Date(data.endpoints[0].createdAt),
    updatedAt: new Date(data.endpoints[0].updatedAt),
  }

  return {
    data: endpoint,
    error: undefined,
  }
}
