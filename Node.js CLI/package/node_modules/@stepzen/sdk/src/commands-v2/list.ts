// Copyright IBM Corp. 2020, 2025

import type {
  SDKConfigurationV2,
  ZenCtlResponseV2,
  StepZenEndpointV2,
} from '../shared/types.js'
import {fetchZenCtlGraphQLQuery} from '../shared/graphql-client.js'

export default async ({
  account,
  deploymentType,
  adminKey,
  sdkConfig,
  folder,
  name,
}: {
  account: string
  deploymentType: string
  adminKey: string
  folder?: string
  name?: string
  sdkConfig: SDKConfigurationV2
}): Promise<ZenCtlResponseV2<StepZenEndpointV2[]>> => {
  const filter: {
    folder_name?: {eq?: string; ne?: string}
    endpoint_name?: {eq?: string; ne?: string}
  } = {}

  if (folder && folder !== '') {
    if (folder.startsWith('!')) {
      filter.folder_name = {ne: folder.substring(1)}
    } else {
      filter.folder_name = {eq: folder}
    }
  }
  if (name && name !== '') {
    if (name.startsWith('!')) {
      filter.endpoint_name = {ne: name.substring(1)}
    } else {
      filter.endpoint_name = {eq: name}
    }
  }
  const {data, errors} = await fetchZenCtlGraphQLQuery<{
    endpoints: Array<{
      account: string
      deploymentType: string
      folderName: string
      endpointName: string
      public: boolean
      endpointType: string
      createdAt: string
      updatedAt: string
    }>
  }>({
    account,
    adminKey,
    deploymentType,
    query: /* GraphQL */ `
      query (
        $account: String!
        $deploymentType: String!
        $adminKey: String!
        $filter: EndpointFilter
      ) {
        endpoints: endpointsForAccount(
          account: $account
          deploymentType: $deploymentType
          adminkey: $adminKey
          filter: $filter
        ) {
          account: account_name
          deploymentType: deployment_type
          folderName: folder_name
          endpointName: endpoint_name
          public: endpoint_public
          endpointType: endpoint_type
          createdAt: created_at
          updatedAt: updated_at
        }
      }
    `,
    variables: {
      account,
      deploymentType,
      adminKey,
      filter,
    },
    sdkConfig,
  })

  if (errors) {
    // strip graphql-specific error details, leave only the message
    const message = errors
      .map(({message}) => {
        if (
          message.startsWith(
            'ERROR: invalid input value for enum zenctl.deployment_type',
          )
        ) {
          return (
            `Invalid deployment type: ${deploymentType}.` +
            ` Please check the 'deploymentType' parameter.`
          )
        }

        return message
      })
      .join('\n')

    return {
      data: undefined,
      error: {
        message,
      },
    }
  }

  // The case with data.endpoints === [] is ambiguous.
  // It may mean "invalid credentials" and it may mean "no endpoints".
  // At this point it makes more sense to assume "no endpoints" since
  // the "invalid credentials" error would be detected earlier, when
  // creating an SDK client instance.
  // See https://github.com/steprz/zen/issues/6361

  const endpoints = data.endpoints.map<StepZenEndpointV2>(endpoint => ({
    account: endpoint.account,
    deploymentType: endpoint.deploymentType,
    folderName: endpoint.folderName,
    endpointName: endpoint.endpointName,
    public: endpoint.public,
    endpointType: endpoint.endpointType,
    createdAt: new Date(endpoint.createdAt),
    updatedAt: new Date(endpoint.updatedAt),
  }))

  return {
    data: endpoints,
    error: undefined,
  }
}
