// Copyright IBM Corp. 2020, 2025

export interface StepZenAccount {
  account: string
  adminkey: string

  /**
   * ZenCtl base URL, e.g. `https://fakefish.stepzen.io` for production,
   * or `http://localhost` for local tests.
   *
   * Determined by taking the first option that is defined:
   *  - the `server` config property explicily passed into the `init()` function
   *  - the `STEPZEN_SERVER_URL` environment variable
   *  - the `https://{account}.stepzen.io` default value
   *
   * The `{account}` placeholder (if present) is replaced by the provided account
   * name
   */
  server: string
}

export type StepZenCredentials = {
  account: string
  adminkey: string
  apikey: string
}

export type UserCredentialsClientOptions = Pick<
  StepZenAccount,
  'account' | 'adminkey'
> &
  Partial<StepZenAccount>

export type AnonymousClientOptions = {
  publicAccountToken: string
  server?: StepZenAccount['server']
}

export interface StepZenDeploy {
  configurationsets?: string[]
  destination: string
  schema: string
}

export interface StepZenList {
  type: 'deployments' | 'schemas' | 'configurationsets'
}

export interface StepZenUpload {
  destination: string
  directory?: string
  file?: string
  type: string
}

export interface ZenCtlRequestHeaders {
  authorization: string
  'stepzen-cli-version': string
  'user-agent': string
}

export interface ZenCtlResponse {
  errors?: Array<string>
  message?: string
  results?: Array<string>
  success: boolean
}

export interface SDKConfiguration {
  /**
   * The name and version of that app that uses the SDK,
   * e.g. `stepzen-cli/0.9.32`
   *
   * It is appended to the user-agent string in all requests made to StepZen
   * through the SDK and becomes availabe in the log analytics.
   */
  appName: string
}

export interface SDKConfigurationV2 extends SDKConfiguration {
  /**
   * The name and version of that app that uses the SDK,
   * e.g. `stepzen-cli/0.9.32`
   *
   * It is appended to the user-agent string in all requests made to StepZen
   * through the SDK and becomes availabe in the log analytics.
   */
  appName: string

  /**
   * Version of ZenCtl API to use:
   *  - `undefined`, `v1`: implies the v1 REST API at /ctl/admin/
   *  - `v2`: implies the v2 GraphQL API
   */
  apiVersion: string

  /**
   * URL of the ZenCtl GraphQL API,
   * e.g. https://stepzen.stepzen.net/api/zenctl2/__graphql
   */
  zenctlApiUrl: string

  /**
   * URL of the StepZen getPublicAccount GraphQL API,
   * e.g. https://stepzen.stepzen.net/api/publicaccount/__graphql
   */
  publicAccountApiUrl: string
}

export interface ZenCtlSuccessResponseV2<T> {
  data: T
  error: undefined
}

export interface ZenCtlErrorResponseV2 {
  data: undefined
  error: {
    message: string
  }
}

export type ZenCtlResponseV2<T> =
  | ZenCtlSuccessResponseV2<T>
  | ZenCtlErrorResponseV2

export interface StepZenCredentialsV2 {
  account: string
  adminKey: string
  apiKeys: string[]
  deploymentType: string
}

export interface StepZenAccountV2 {
  account: string
  ownerEmail: string
  adminKey: string
  apiKeys: string[]
  deploymentType: string
}

export interface StepZenDeleteV2 {
  account_name: string
  folder_name: string
  endpoint_name: string
  updated_at: string
}

export interface StepZenEndpointV2 {
  account: string
  deploymentType: string
  folderName: string
  endpointName: string
  public: boolean
  endpointType: string
  createdAt: Date
  updatedAt: Date
}

export interface SchemaFiles {
  files: SchemaFile[]
  entryPoint?: String
}

export interface SchemaFile {
  name: string
  content: string
}

export interface Configuration {
  configurationset?: ConfigurationSet[]
  ruleset?: QueryRule[]
  access?: Policies
  deployment?: DeploymentSettings
}

export interface ConfigurationSet {
  configuration?: Record<string, any>
}

export interface QueryRule {
  query: string
  disabled?: boolean
  rules?: Rule[]
}

export interface Rule {
  predicate: string
  action: string
}

export interface Policies {
  policies?: Policy[]
}

export interface Policy {
  type?: string
  rules?: FieldRule[]
  policyDefault?: FieldCondition
}

export interface FieldRule {
  name?: string
  description?: string
  condition: string
  fields?: string[]
}

export interface FieldCondition {
  condition: string
}

export interface DeploymentSettings {
  identity?: IdentitySettings
}

export interface IdentitySettings {
  keys?: JWTKey[]
  issuer?: string
  subject?: string
  audience?: string
  claims?: string[]
  jwksendpoint?: string
}

export interface JWTKey {
  algorithm?: string
  keyid?: string
  key?: string
}
