// Copyright IBM Corp. 2020, 2025

import debug from 'debug'
import fetch from '@stepzen/fetch'
import type {ExecutionResult} from 'graphql'
import type {ObjMap} from 'graphql/jsutils/ObjMap.js'

import {SDKConfigurationV2} from './types.js'
import {getUserAgent} from './request.js'

// The StepZen's ZenCtl GraphQL API offers stronger guarantees than defined in
// the GraphQL standard:
export type GraphQLResponse<TData = Record<string, any>> =
  | GraphQLSuccessResponse<TData>
  | GraphQLErrorResponse<TData>

// 1. a successful response would always have a non-null `data` property and no `errors`.
type GraphQLSuccessResponse<TData> = ExecutionResult<TData, ObjMap<unknown>> & {
  data: TData
  errors: undefined
}

// 2. an error response would always have a non-null `errors` property.
type GraphQLErrorResponse<TData> = ExecutionResult<TData, ObjMap<unknown>> &
  Required<Pick<ExecutionResult<TData, ObjMap<unknown>>, 'errors'>>

export const fetchGraphQLQuery = async <T = Record<string, any>>({
  url,
  query,
  variables = {},
  operationName,
  headers = {},
}: {
  url: URL | string
  query: string
  variables?: Record<string, any>
  operationName?: string
  headers?: Record<string, any>
}): Promise<ExecutionResult<T, ObjMap<unknown>>> => {
  debug('stepzen:sdk:url')(url)
  debug('stepzen:sdk:headers')(headers)
  debug('stepzen:sdk:query')(query)
  debug('stepzen:sdk:variables')(JSON.stringify(variables))
  if (operationName) {
    debug('stepzen:sdk:operationName')(operationName)
  }

  const body = {
    query,
    variables,
    operationName,
  }

  try {
    const startTime = Date.now()
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'content-type': 'application/json',
        ...headers,
      },
      body: JSON.stringify(body),
    })
    const endTime = Date.now()
    if (response.status !== 200) {
      throw new Error(
        `Unexpected HTTP status ${response.status}` +
          ` from the GraphQL endpoint '${url}' (expected 200)`,
      )
    }

    const json = await response.json()
    debug('stepzen:sdk:response')(JSON.stringify(json))
    // trace is a JSON readable summation in a single line; eventually allow stepzen request to return this directly?
    debug('stepzen:sdk:trace')(
      JSON.stringify({
        request: body,
        response: json,
        // added information
        metadata: {
          elapsedMilliseconds: endTime - startTime,
        },
      }),
    )

    const {data, errors, extensions} = json
    if (errors) {
      return {data, errors, extensions}
    } else if (data) {
      return {data, errors: undefined, extensions}
    }

    throw new Error(
      `Unexpected response structure from the GraphQL endpoint '${url}'` +
        ` (expected {data, errors}, recieved ${JSON.stringify(json)})`,
    )
  } catch (error) {
    debug('stepzen:sdk:response')(`Failed to fetch from a GraphQL API`, error)
    throw error
  }
}

export const fetchZenCtlGraphQLQuery = async <T = Record<string, any>>({
  account,
  adminKey,
  deploymentType,
  query,
  variables = {},
  sdkConfig,
}: {
  account: string
  adminKey: string
  deploymentType: string
  query: string
  variables?: Record<string, any>
  sdkConfig: SDKConfigurationV2
}): Promise<GraphQLResponse<T>> => {
  try {
    return (await fetchGraphQLQuery({
      url: sdkConfig.zenctlApiUrl,
      query,
      variables,
      headers: {
        'user-agent': getUserAgent(sdkConfig),
      },
    })) as GraphQLResponse<T>
  } catch (error) {
    throw new Error(`Failed to connect to ZenCtl API. ${error}`)
  }
}

export const fetchPublicAccountGraphQLQuery = async <T = Record<string, any>>({
  url,
  query,
  variables = {},
  sdkConfig,
}: {
  url: URL | string
  query: string
  variables?: Record<string, any>
  sdkConfig: SDKConfigurationV2
}): Promise<GraphQLResponse<T>> => {
  try {
    return (await fetchGraphQLQuery({
      url,
      query,
      variables,
      headers: {
        'user-agent': getUserAgent(sdkConfig),
      },
    })) as GraphQLResponse<T>
  } catch (error) {
    throw new Error(`Failed to connect to Public Account API. ${error}`)
  }
}
