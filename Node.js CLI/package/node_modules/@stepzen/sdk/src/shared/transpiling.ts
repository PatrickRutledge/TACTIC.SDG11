// Copyright IBM Corp. 2020, 2025

import dotenv from 'dotenv'
import debug from 'debug'
import fsx from 'fs-extra'
import os from 'node:os'
import path from 'node:path'
import {transpile} from '@stepzen/transpiler'
import {rmtemp} from './rmtemp.js'

/**
 * @returns `undefined` when called without arguments
 */
export async function transpileConfigurationset(): Promise<undefined>

/**
 * Strip off any unsupported properties and substitute any STEPZEN_*
 * placeholders with matching environment variables (load a `.env` file
 * if present next to the `config.yaml` file).
 *
 * @param file path to a `config.yaml` file
 * @returns path to a temp copy of `config.yaml` file with all clean-up
 *    and substitutions made
 */
export async function transpileConfigurationset(file: string): Promise<string>

export async function transpileConfigurationset(file?: string) {
  if (!file) {
    return
  }

  const source = file.substring(0, file.lastIndexOf('/'))
  debug('stepzen:dotenv')(
    `loading .env from ${path.resolve(source)}` +
      `, at sdk/src/shared/transpiling.ts`,
  )
  dotenv.config({path: path.resolve(source, '.env')})

  const tmp = path.join(os.tmpdir(), `stepzen-transpiler-${Date.now()}`)
  const configPath = path.join(tmp, 'config.yaml')

  fsx.ensureDirSync(tmp, 0o700)
  try {
    fsx.copyFileSync(file, configPath)
    fsx.chmodSync(configPath, 0o600)

    const result = await transpile(tmp)

    fsx.emptyDirSync(tmp)
    fsx.writeFileSync(configPath, result.config || '', {mode: 0o600})
    return configPath
  } catch (error) {
    rmtemp(tmp)
    throw error
  }
}
