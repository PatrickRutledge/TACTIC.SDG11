// Copyright IBM Corp. 2020, 2025

import accountCmd from './commands-v2/account.js'
import deleteCmd from './commands-v2/delete.js'
import deployCmd from './commands-v2/deploy.js'
import listEndpointsCmd from './commands-v2/list.js'
import getPublicAccount from './commands-v2/getPublicAccount.js'
import {
  generateConfigurationPayload,
  generateSchemaFilesPayload,
} from './shared/payloads.js'
import {SDKConfigurationV2} from './shared/types.js'

export const ensureValidCredentials = async (
  auth:
    | {account: string; adminKey: string; deploymentType: string}
    | {publicAccountToken: string; deploymentType: string},
  sdkConfig: SDKConfigurationV2,
) => {
  let credentials

  if ('publicAccountToken' in auth) {
    // create an anonymous account and use it to initialize an SDK client instance
    const {data, error} = await getPublicAccount({
      token: auth.publicAccountToken,
      deploymentType: auth.deploymentType,
      sdkConfig,
    })

    if (error) {
      throw new Error(`An unexpected error occurred: ${error.message}`)
    }

    credentials = data
  } else {
    // use the provided account to initialize an SDK client instance
    const {data, error} = await accountCmd({
      account: auth.account,
      adminKey: auth.adminKey,
      deploymentType: auth.deploymentType,
      sdkConfig,
    })

    if (error) {
      throw new Error(error.message)
    }

    credentials = data
  }

  return credentials
}

export const createSdkClient = async (
  auth:
    | {account: string; adminKey: string; deploymentType: string}
    | {publicAccountToken: string; deploymentType: string},
  sdkConfig: SDKConfigurationV2,
) => {
  const credentials = await ensureValidCredentials(auth, sdkConfig)

  return {
    get credentials(): typeof credentials {
      // always return a copy to avoid accidential modification by the caller
      return {...credentials}
    },
    /**
     * Delete a GraphQL endpoint at StepZen.
     *
     * @param folder - folder name (e.g. `api`); will be a part of the endpoint URL
     * @param name - endpoint name (e.g. `users`); will be a part of the endpoint URL
     * @returns details of the deleted endpoint
     */
    delete: async ({folder, name}: {folder: string; name: string}) => {
      return deleteCmd({
        account: credentials.account,
        adminKey: credentials.adminKey,
        deploymentType: credentials.deploymentType,
        folder: folder,
        name: name,
        sdkConfig,
      })
    },
    /**
     * Create or update a GraphQL endpoint at StepZen.
     * The URL of the endpoint is formed as {StepZen instance URL}/{folder}/{name}/__graphql
     * e.g. https://account.stepzen.net/api/users/__graphql
     *
     * @param folder - folder name (e.g. `api`); will be a part of the endpoint URL
     * @param name - endpoint name (e.g. `users`); will be a part of the endpoint URL
     * @param directory - full path to a GraphQL schema directory (should have `index.graphql` in it)
     * @param config - full path to a config `.yml` file
     * @param public - whether or not to allow public access to the endpoint (`false` by default)
     * @returns details of the created / updated endpoint
     */
    deploy: async ({
      folder,
      name,
      directory,
      config,
      public: _public = false,
    }: {
      folder: string
      name: string
      directory: string
      config?: string
      public?: boolean
    }) => {
      return deployCmd({
        account: credentials.account,
        adminKey: credentials.adminKey,
        deploymentType: credentials.deploymentType,
        endpointName: name,
        endpointType: 'dev',
        folderName: folder,
        public: _public,
        schemaFiles: generateSchemaFilesPayload(directory),
        configuration: await generateConfigurationPayload(config),
        sdkConfig,
      })
    },
    list: {
      /**
       * List deployed endpoints.
       *
       * @returns list of deployed endpoints
       */
      endpoints: async ({
        folder,
        name,
      }: {folder?: string; name?: string} = {}) => {
        return listEndpointsCmd({
          account: credentials.account,
          adminKey: credentials.adminKey,
          deploymentType: credentials.deploymentType,
          sdkConfig,
          folder,
          name,
        })
      },
    },
  }
}
