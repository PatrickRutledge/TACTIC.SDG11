// Copyright IBM Corp. 2020, 2025

import {parse} from 'graphql'
import dotenv from 'dotenv'
import debug from 'debug'
import fs from 'node:fs'
import glob from 'glob'
import path from 'node:path'
import yaml from 'yaml'

import print from '../actions/print.js'
import stitch from '../actions/stitch.js'
import configure from './configure.js'

import configMutations from '../mutations/config/index.js'
import {rmtemp} from '../utils/rmtemp.js'

/**
 * Read a StepZen workspace directory, apply StepZen-specific schema and config
 * transformations, and return its effective GraphQL schema and configuration
 * as in-memory strings.
 *
 * @param {*} source absolute path to a schema root folder
 * @return {*} schema, configuration, and a "transpiled" flag indicating
 *            whether or not any StepZen-specific transformations have actually
 *            been applied.
 */
export default async (source: string) => {
  // Ensure source and output directories exist
  if (!fs.existsSync(source)) {
    throw new Error(`Cannot find source directory ${source}`)
  }

  // Load env vars, from working and source directories
  debug('stepzen:dotenv')(
    `loading .env from ${process.cwd()}, at transpiler/src/actions/transpile.ts:24`,
  )
  dotenv.config()
  debug('stepzen:dotenv')(
    `loading .env from ${path.resolve(source)}` +
      `, at transpiler/src/actions/transpile.ts:29`,
  )
  dotenv.config({path: path.resolve(source, '.env')})

  // State of whether we've transpiled or not
  let transpiledConfig = false

  // See whether to transpile config
  let config = await configure(source, true)
  const configCopy = config

  if (config) {
    for await (const mutation of configMutations) {
      config = await mutation(config)
    }
  }

  if (configCopy !== config) {
    transpiledConfig = true
  }

  // See whether to transpile GraphQL
  const graphqlFiles = glob.sync('**/*.graphql', {cwd: source})
  let schema = ''

  if (graphqlFiles.length > 0) {
    const stitched = await stitch(source)
    try {
      const index = path.join(stitched, 'index.graphql')
      const graphql = fs.readFileSync(index, 'utf8')
      schema = print(parse(graphql))
    } finally {
      rmtemp(stitched)
    }
  }

  return {
    config: yaml.stringify(config),
    schema,
    transpiled: transpiledConfig,
  }
}
