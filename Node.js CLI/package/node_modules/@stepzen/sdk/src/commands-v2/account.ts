// Copyright IBM Corp. 2020, 2025

import {
  SDKConfigurationV2,
  StepZenAccountV2,
  ZenCtlResponseV2,
} from '../shared/types.js'
import {fetchZenCtlGraphQLQuery} from '../shared/graphql-client.js'

export default async ({
  account,
  adminKey,
  deploymentType,
  sdkConfig,
}: {
  account: string
  adminKey: string
  deploymentType: string
  sdkConfig: SDKConfigurationV2
}): Promise<ZenCtlResponseV2<StepZenAccountV2>> => {
  const {data, errors} = await fetchZenCtlGraphQLQuery<{
    accounts: Array<{
      deploymentType: string
      account: string
      ownerEmail: string
      adminKey: string
      apiKeysAsJsonArray: string
    }>
  }>({
    account,
    adminKey,
    deploymentType,
    query: `query (
      $account: String!
      $adminKey: String!
      $deploymentType: String!
    ) {
      accounts: account(
        account: $account
        adminkey: $adminKey
        deploymentType: $deploymentType
      ) {
        deploymentType: account_deployment_type
        account: account_name
        ownerEmail: account_owner_email
        adminKey: key_value_admin
        apiKeysAsJsonArray: key_value_api
      }
    }`,
    variables: {
      account,
      adminKey,
      deploymentType,
    },
    sdkConfig,
  })

  if (errors) {
    // strip graphql-specific error details, leave only the message
    const message = errors
      .map(({message}) =>
        message.startsWith(
          'ERROR: invalid input value for enum zenctl.deployment_type',
        )
          ? `Invalid deployment type: ${deploymentType}`
          : message,
      )
      .join('\n')

    return {
      data: undefined,
      error: {
        message,
      },
    }
  }

  const accounts = data.accounts.filter(Boolean)
  if (!accounts.length) {
    return {
      data: undefined,
      error: {
        message: 'Your credentials are invalid',
      },
    }
  }

  return {
    data: {
      account: accounts[0].account,
      deploymentType: accounts[0].deploymentType,
      ownerEmail: accounts[0].ownerEmail,
      adminKey: accounts[0].adminKey,
      apiKeys: JSON.parse(accounts[0].apiKeysAsJsonArray),
    },
    error: undefined,
  }
}
